@model IEnumerable<Web_QLNS_VTH.Models.Luong>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script defer src="~/Scripts/tableDemo.js"></script>
<div class="d-flex">
    <button class="btn btn-outline-primary col-1 fw-bold" type="button" onclick="location.href='@Url.Action("Create", "Luongs")'">
        <i class="fa fa-plus me-2"></i> Thêm
    </button>
    @*@Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })*@
    <h3 class="text-center col-11 text-uppercase fw-bolder">Danh sách lương</h3>
</div>
<table class="table table-bordered mt-1" id="dataTable" width="100%" cellspacing="0">
    <thead>
        <tr style="background-color: #10B1FC;color: white">
            <th>
                @Html.DisplayNameFor(model => model.NhanVien.hoTen)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.thangNam)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.heSoLuong)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.mucLuong)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.phuCap)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.soNgayCong)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.luongUngTruoc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.luongNhan)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <img src="~/Img/@item.NhanVien.anh" style="height: 50px; width: 50px; border-radius: 50%; object-fit: cover; border: 1px solid black; " />
                    @Html.DisplayFor(modelItem => item.NhanVien.hoTen)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.thangNam)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.heSoLuong)
                </td>
                <td>
                    @item.mucLuong.Value.ToString("N0") VND
                </td>
                <td>
                    @item.phuCap.Value.ToString("N0") VND
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.soNgayCong)
                </td>
                <td>
                    @item.luongUngTruoc.Value.ToString("N0") VND
                </td>
                <td>
                    @item.luongNhan.Value.ToString("N0") VND
                </td>
                <td>
                    <button class="btn btn-outline-success" type="button" onclick="location.href='@Url.Action("Details", "Luongs",new {id = item.maLuong})'">
                        <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                        </svg>
                    </button>
                    <button class="btn btn-outline-danger" type="button" data-bs-toggle="modal" data-bs-target="#confirmModal-@item.maNV">
                        <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                            <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                        </svg>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
@*<div class="card shadow mb-4" style="width:500px">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Bar Chart</h6>
    </div>
    <div class="card-body">
        <div class="chart-bar">
            <canvas id="myBarChart" width="200" height="400"></canvas>
        </div>
        <hr>
        Styling for the bar chart can be found in the
        <code>/js/demo/chart-bar-demo.js</code> file.
    </div>
</div>*@
@{
    List<string> ls = new List<string> { "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6" };
}
<script>
    var ctx = document.getElementById("myBarChart");
    var myBarChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ls)),
            datasets: [{
                label: "Lương",
                backgroundColor: "#4e73df",
                hoverBackgroundColor: "#2e59d9",
                borderColor: "#4e73df",
                data: [4215, 5312, 6251, 7841, 9821, 14984],
            }],
        },
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: 10,
                    right: 25,
                    top: 25,
                    bottom: 0
                }
            },
            scales: {
                xAxes: [{
                    time: {
                        unit: 'month'
                    },
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    ticks: {
                        maxTicksLimit: 6
                    },
                    maxBarThickness: 25,
                }],
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: 15000,
                        maxTicksLimit: 5,
                        padding: 10,
                        // Include a dollar sign in the ticks
                        callback: function (value, index, values) {
                            return '$' + number_format(value);
                        }
                    },
                    gridLines: {
                        color: "rgb(234, 236, 244)",
                        zeroLineColor: "rgb(234, 236, 244)",
                        drawBorder: false,
                        borderDash: [2],
                        zeroLineBorderDash: [2]
                    }
                }],
            },
            legend: {
                display: false
            },
            tooltips: {
                titleMarginBottom: 10,
                titleFontColor: '#6e707e',
                titleFontSize: 14,
                backgroundColor: "rgb(255,255,255)",
                bodyFontColor: "#858796",
                borderColor: '#dddfeb',
                borderWidth: 1,
                xPadding: 15,
                yPadding: 15,
                displayColors: false,
                caretPadding: 10,
                callbacks: {
                    label: function (tooltipItem, chart) {
                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                        return datasetLabel + ': $' + number_format(tooltipItem.yLabel);
                    }
                }
            },
        }
    });

</script>
